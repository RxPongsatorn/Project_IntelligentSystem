import streamlit as st

st.set_page_config(page_title="Explaination - CIFAR-10 Classifier", page_icon=":book:", layout="wide")

st.title("อธิบายเกี่ยวกับการพัฒนาโมเดล")

st.markdown("""
    ### วิธีการพัฒนาโมเดล Classifier สำหรับ CIFAR-10
    ในหน้านี้เราจะอธิบายเกี่ยวกับกระบวนการพัฒนาโมเดล CNN (Convolutional Neural Network) 
    สำหรับทำนายประเภทของภาพจากชุดข้อมูล CIFAR-10 โดยมีรายละเอียดต่างๆ ดังนี้
""")

# 1. อธิบายชุดข้อมูล (Dataset)
st.subheader("1. ชุดข้อมูล (Dataset)")
st.markdown("""
    ชุดข้อมูล **CIFAR-10** ประกอบด้วยภาพขนาด 32x32 พิกเซลใน 10 ประเภท ได้แก่:
    1. เครื่องบิน (airplane)
    2. รถยนต์ (automobile)
    3. นก (bird)
    4. แมว (cat)
    5. กวาง (deer)
    6. สุนัข (dog)
    7. กบ (frog)
    8. ม้า (horse)
    9. เรือ (ship)
    10. รถบรรทุก (truck)
    
    CIFAR-10 ประกอบด้วยภาพทั้งหมด 60,000 ภาพ โดยแบ่งเป็นชุดข้อมูลฝึก (training) 50,000 ภาพ และชุดข้อมูลทดสอบ (testing) 10,000 ภาพ
    ชุดข้อมูลนี้ถูกใช้ในการฝึกโมเดลเพื่อจำแนกประเภทของภาพต่างๆ
""")

# 2. ทฤษฎีของอัลกอริธึม (Theory of Algorithm)
st.subheader("2. ทฤษฎีของอัลกอริธึม (CNN - Convolutional Neural Network)")
st.markdown("""
    โมเดลที่ใช้ในแอปนี้คือ **Convolutional Neural Network (CNN)** ซึ่งเป็นอัลกอริธึมที่มีความสามารถในการจับลักษณะเฉพาะของภาพ เช่น ขอบ หรือ รูปร่าง
    โดยการทำงานของ CNN จะประกอบไปด้วยหลายๆ เลเยอร์ที่สำคัญ เช่น:
    1. **Convolutional Layer**: ใช้ในการสกัดคุณสมบัติของภาพ เช่น ขอบ รูปร่าง
    2. **Pooling Layer**: ใช้ในการย่อขนาดของข้อมูล เพื่อลดจำนวนพารามิเตอร์
    3. **Fully Connected Layer**: ใช้ในการตัดสินใจประเภทของภาพ
    
    โดยโมเดล CNN มีการใช้ **ReLU** เป็นฟังก์ชันการกระตุ้น (activation function) เพื่อเพิ่มประสิทธิภาพในการเรียนรู้ และใช้ **softmax** ในการทำนายประเภทของภาพ
""")

# 3. ขั้นตอนในการพัฒนา (Steps to Develop)
st.subheader("3. ขั้นตอนในการพัฒนาโมเดล")
st.markdown("""
    ขั้นตอนในการพัฒนาโมเดลมีดังนี้:
    
    1. **เตรียมข้อมูล (Data Preparation)**:
       - โหลดชุดข้อมูล CIFAR-10 จาก `tensorflow.keras.datasets.cifar10`
       - แบ่งข้อมูลออกเป็นชุดข้อมูลฝึก (training) และชุดข้อมูลทดสอบ (testing)
    
    2. **ออกแบบโมเดล (Model Design)**:
       - สร้างโมเดล **CNN** โดยใช้ **Conv2D** และ **MaxPooling2D** ในการสกัดคุณสมบัติ
       - ใช้ **Flatten** เพื่อเปลี่ยนข้อมูลให้เป็นเวกเตอร์
       - สร้าง **Fully Connected Layer** ที่ใช้ **Dense** ในการตัดสินใจประเภทของภาพ
    
    3. **เทรนโมเดล (Model Training)**:
       - ใช้ข้อมูลฝึกเพื่อเทรนโมเดล โดยใช้ **Adam Optimizer** และ **sparse_categorical_crossentropy** เป็นฟังก์ชันการสูญเสีย
       - ประเมินโมเดลด้วยชุดข้อมูลทดสอบ
    
    4. **การทำนาย (Prediction)**:
       - หลังจากที่โมเดลได้รับการเทรนแล้ว สามารถใช้โมเดลเพื่อทำนายประเภทของภาพใหม่ได้
       - โดยใช้ **softmax activation** เพื่อให้ผลลัพธ์เป็นการจัดประเภท
    
    5. **บันทึกและโหลดโมเดล (Model Saving and Loading)**:
       - บันทึกโมเดลที่เทรนเสร็จแล้วลงในไฟล์ `cifar10_model.h5` เพื่อใช้งานในอนาคต
       - หากไฟล์โมเดลไม่พบ ระบบจะสร้างและเทรนโมเดลใหม่

""")

# 4. ผลลัพธ์ (Results)
st.subheader("4. ผลลัพธ์")
st.markdown("""
    หลังจากที่โมเดลได้รับการเทรนและทดสอบแล้ว โมเดลสามารถทำนายประเภทของภาพจากชุดข้อมูล CIFAR-10 ได้อย่างแม่นยำ
    ในแอปพลิเคชันนี้ เราสามารถสุ่มเลือกภาพจากชุดข้อมูลทดสอบ และให้ระบบทำนายประเภทของภาพนั้นได้
    ซึ่งการแสดงผลจะรวมถึงประเภทที่ทำนายและการใช้สีที่แตกต่างกันตามประเภทของภาพ
""")

